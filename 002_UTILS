include("include");

function arrayFusionKeepKeysCells(@array1 , @array2) {
var _array = [];
	for (var cell in _ALL_CELLZ) {
		if (array1[cell]!=null) _array[cell] = array1[cell];
		if (array2[cell]!=null) _array[cell] = array2[cell];
	}
	return _array;
}

function getItemRealDmg(@Item) {
	var NumberOfDMG = 0;
	var ie = _ITEM_EFFECTS[Item];
	for (var eff in ie) {
		if (eff[0] == EFFECT_DAMAGE || eff[0] == EFFECT_POISON) {
			NumberOfDMG += eff[1] * (1 + eff[3]);
		}
	}

	for (var eff in ie) {
		if (eff[0] == EFFECT_HEAL) {
			NumberOfDMG = eff[1] * (1 + eff[3]);
		}
	}




	for (var eff in ie) {
		if (eff[0] == EFFECT_ABSOLUTE_SHIELD) {
			NumberOfDMG = eff[1] * (1 + eff[3]);
		}
	}


	for (var eff in ie) {
		if (eff[0] == EFFECT_RELATIVE_SHIELD) {
			NumberOfDMG = eff[1] * (1 + eff[3]);
		}
	}

	for (var eff in ie) {
		if (eff[0] == EFFECT_SUMMON) {
			NumberOfDMG = bulbcoef(Item, EnemyLeekG)[1];
		}
	}




	for (var eff in ie) {
		if (eff[0] == EFFECT_BUFF_STRENGTH) {
			NumberOfDMG = eff[1] * (1 + eff[3]);
		}
	}



	for (var eff in ie) {
		if (eff[0] == EFFECT_BUFF_TP) {
			NumberOfDMG = eff[1] * (1 + eff[3]);
		}
	}




	for (var eff in ie) {
		if (eff[0] == EFFECT_BUFF_MP) {
			NumberOfDMG = eff[1] * (1 + eff[3]);
		}
	}




	for (var eff in ie) {
		if (eff[0] == EFFECT_SHACKLE_TP) {
			NumberOfDMG = eff[1] * (1 + eff[3]);
		}
	}


	for (var eff in ie) {
		if (eff[0] == EFFECT_SHACKLE_MP) {
			NumberOfDMG = eff[1] * (1 + eff[3]);
		}
	}



	for (var eff in ie) {
		if (eff[0] == EFFECT_SHACKLE_STRENGTH) {
			NumberOfDMG = eff[1] * (1 + eff[3]);
		}
	}

	for (var eff in ie) {
		if (eff[0] == EFFECT_VULNERABILITY) {
			NumberOfDMG = eff[1] * (1 + eff[3]);
		}
	}


	for (var eff in ie) {
		if (eff[0] == EFFECT_BOOST_MAX_LIFE) {
			NumberOfDMG = eff[1] * (1 + eff[3]);
		}
	}
	for (var eff in ie) {
		if (eff[0] == EFFECT_BUFF_AGILITY) {
			NumberOfDMG = eff[1] * (1 + eff[3]);
		}
	}
	for (var eff in ie) {
		if (eff[0] == EFFECT_DAMAGE_RETURN) {
			NumberOfDMG = eff[1] * (1 + eff[3]);
		}
	}
	for (var eff in ie) {
		if (eff[0] == EFFECT_BUFF_RESISTANCE) {
			NumberOfDMG = eff[1] * (1 + eff[3]);
		}
	}
	return NumberOfDMG;
}

function EnemyLeekArray() {
	var array = [];
	for (var i in getAliveEnemies()) {
		if (!isSummon(i)) {
			push(array, i);
		}
	}
	return array;
}

function EnemyLeek() {
	var bestleek;
	var BestDist = 99999;
	for (var leek in EnemyLeekArray()) {
		var g = getPathLength(_CELL[_MY_SELF], _CELL[leek]);
		if (g < BestDist) {
			BestDist = g;
			bestleek = leek;
		}
	}
	return bestleek;
}
if (getTurn()==1 ||EnemyLeekG != null && isDead(EnemyLeekG) || EnemyLeekG == null) EnemyLeekG=EnemyLeek();

function ShieldScore(@leek) {
	return _ABSOLUTE_SHIELD[leek] + _RELATIVE_SHIELD[leek] * 50;
}

function isPositiv(@item) {
	return _CHIP_ISPOSITIV[item];
}

function getColorFromDmg(@dmg) {
	if (dmg == 0) {
		return COLOR_GREEN;
	}
	return getColor((dmg * 30), 100, 0);
}

function getItemMinDmg(@item) {
	var NumberOfDMG = 0;
	var ie = _ITEM_EFFECTS[item];
	for (var eff in ie) {
		if (eff[0] == EFFECT_DAMAGE || eff[0] == EFFECT_POISON) {
			NumberOfDMG += eff[1];
		}
	}
	return NumberOfDMG;
}

function StartTestFunction() {
	_OPS = getOperations();
}

function StopTestFunction(@name) {
	debug('OpÃ©s test : ' + name + " " + ((getOperations() - _OPS) / 1000) + ' k ');
}

function AllAllysExept(@exeptionleek) {
	var array = [];
	if (exeptionleek != null) {
		for (var leek in _ALIVE_ALLIES) {
			if (leek != exeptionleek) {
				push(array, leek);
			}
		}
	} else return _ALIVE_ALLIES;
	return array;
}

function FindItemsCellzInArrayItemsCellsTo(@item) {
	for (var perdu in ArrayItemsCellsTo) {
		if (perdu[1] == item) {
			return perdu;
		}
	}
	return null;
}

function HelpLibeScoreEnemy(@leek) {
	var effects = _EFFECTS[leek];
	var Score = 0;
	for (var eff in effects) {
		if (eff[0] == EFFECT_RELATIVE_SHIELD) Score += (eff[1] * 55);
		if (eff[0] == EFFECT_ABSOLUTE_SHIELD) Score += (eff[1] * 25);
		if (eff[0] == EFFECT_POISON) Score -= (eff[1] * 15);
		if (eff[0] == EFFECT_BUFF_AGILITY) Score += (eff[1] * 5);
		if (eff[0] == EFFECT_BUFF_MP) Score += (eff[1] * 100);
		if (eff[0] == EFFECT_BUFF_RESISTANCE) Score += (eff[1] * 80);
		if (eff[0] == EFFECT_BUFF_STRENGTH) Score += (eff[1] * 15);
		if (eff[0] == EFFECT_BUFF_TP) Score += (eff[1] * 105);
		if (eff[0] == EFFECT_BUFF_WISDOM) Score += (eff[1] * 70);
		if (eff[0] == EFFECT_DAMAGE_RETURN) Score += (eff[1] * 100);
		if (eff[0] == EFFECT_HEAL) Score += (eff[1] * 15);
		if (eff[0] == EFFECT_SHACKLE_MAGIC) Score -= (eff[1] * 25);
		if (eff[0] == EFFECT_SHACKLE_MP) Score -= (eff[1] * 100);
		if (eff[0] == EFFECT_SHACKLE_STRENGTH) Score -= (eff[1] * 25);
		if (eff[0] == EFFECT_SHACKLE_TP) Score -= (eff[1] * 100);
		if (eff[0] == EFFECT_VULNERABILITY) Score -= (eff[1] * 40);

	}
	return Score;
}

function getItemTargets(@item, @cell) {
	return isChip(item) ? getChipTargets(item, cell) : getWeaponTargets(item, cell);
}

function getItemTargetsEnemyMinusAlly(@item, @cell) {
	var JspCommentTappelerDsl = 0;
	for (var target in getItemTargets(item, cell)) {
		if (isAlly(target)) {
			JspCommentTappelerDsl -= 1;
		} else {
			if (isEnemy(target)) {
				JspCommentTappelerDsl += 1;
			}
		}
	}
	if (isPositiv(item)) {
		JspCommentTappelerDsl = 0 - JspCommentTappelerDsl;
	}
	return JspCommentTappelerDsl;
}

function getTargetsItem(@item, @cell) {
	var nbally = 0;
	var nbenemy = 0;
	for (var target in getItemTargets(item, cell)) {
		if (isAlly(target) && target != _MY_SELF) {
			nbally++;
		} else {
			if (isEnemy(target)) {
				nbenemy++;
			}
		}
	}
	return [nbenemy, nbally];
}

function isBuffer(@leek) {
	if (_WISDOM[leek] >= 400 || _SCIENCE[leek] >= 400) {
		return true;
	}
	return false;
}

function DoesHaveChip(@leek, @item) {
	for (var eff in _EFFECTS[leek]) {
		if (eff[5] == item) {
			return true;
		}
	}
	return false;
}

function isOnlyBulb(@item) {
	var IE = _ITEM_EFFECTS[item];
	if (IE[0][4] == 21 || IE[0][4] == 22) {
		return true;
	} else return false;
}

function RealLeeklife(@leek) {
	var life = _LIFE[leek];
	for (var eff in _EFFECTS[leek]) {
		if (eff[0] == EFFECT_POISON) {
			life -= eff[1];
		}
		if (eff[0] == EFFECT_HEAL) {
			life += eff[1];
		}
	}
	return life;
}

debug("Real Life " + getName(EnemyLeekG) + " : " + RealLeeklife(EnemyLeekG));
//64
function getColorCellFromDMG(@dmg) {
	var clr = 250 - (dmg / 64);
	var clrv = dmg / 64;
	return getColor(clr, clrv, 0);
}

function DmgForTurn(@leek) {
	return _LIFE[leek] - RealLeeklife(leek);
}

function getNumberOfBulb() {
	var nbally = 0;
	var nbenemy = 0;
	for (var i in getAliveAllies()) {
		if (isSummon(i)) {
			nbally++;
		}
	}
	for (var i in getAliveEnemies()) {
		if (isSummon(i)) {
			nbenemy++;
		}
	}
	return [nbally, nbenemy];
}

function bulbcoef(@chip, @enemyPrincipal) {
	var MetaBulbCoef = _STRENGTH[enemyPrincipal] > 0 ? 255 : 0;
	if (_SCIENCE[enemyPrincipal] >= 400) MetaBulbCoef += 60;
	var GueriBulbCoef = _MAGIC[enemyPrincipal] > 0 ? 45 : 20;
	if (chip == CHIP_METALLIC_BULB) {
		return [ENTITY_METALLIC_BULB, MetaBulbCoef];
	} else if (chip == CHIP_HEALER_BULB) {
		return [ENTITY_HEALER_BULB, GueriBulbCoef];
	} else if (chip == CHIP_LIGHTNING_BULB) {
		return [ENTITY_LIGHTNING_BULB, 30];
	} else if (chip == CHIP_FIRE_BULB) {
		return [ENTITY_FIRE_BULB, 25];
	} else if (chip == CHIP_ICED_BULB) {
		return [ENTITY_ICED_BULB, 16];
	} else if (chip == CHIP_ROCKY_BULB) {
		return [ENTITY_ROCKY_BULB, 10];
	} else if (chip == CHIP_PUNY_BULB) {
		return [ENTITY_PUNY_BULB, 8];
	}
}

function AntidoteScore(@leek) {

	var i = 0;
	for (var eff in _EFFECTS) {
		if (eff[0] == EFFECT_POISON) {
			i++;
		}
	}
	return i;
}

function areaNbFromWeapon(WeaponOrChip) {
	var area = 0;
	var IArea = _ITEM_AREA[WeaponOrChip];
	if (IArea == AREA_CIRCLE_1) {
		area = 1;
	}
	if (IArea == AREA_CIRCLE_2) {
		area = 2;
	}
	if (IArea == AREA_CIRCLE_3) {
		area = 3;
	}
	return area;
}

function DistFromArea(WeaponOrChip) {
	var area = 0;
	var IArea = _ITEM_AREA[WeaponOrChip];
	if (IArea == AREA_CIRCLE_1) {
		area = 2;
	}
	if (IArea == AREA_CIRCLE_2) {
		area = 3;
	}
	if (IArea == AREA_CIRCLE_3) {
		area = 4;
	}
	if (isPositiv(WeaponOrChip) || WeaponOrChip == CHIP_LIGHTNING) {
		area = 0;
	}
	return area;
}

function getCellsToUseItem(@Item, @Cell) {
	return isChip(Item) ? getCellsToUseChipOnCell(Item, Cell) : getCellsToUseWeaponOnCell(Item, Cell);
}

function getNumberOfPeopleInBrochette(@cellToShoot, @cellWereUAre) {
	var score = 0;
	if (isOnSameLine(cellToShoot, cellWereUAre) && lineOfSight(cellToShoot, cellWereUAre)) {
		for (var i in _ALIVE_ENEMIES) {
			if (isOnSameLine(_CELL[i], cellToShoot) && isOnSameLine(_CELL[i], cellWereUAre) && lineOfSight(cellToShoot, i)) {
				score++;
			}
		}
	}
	return score;
}

function getCellToUseItemBasic(@item, @cellto) {
	return isChip(item) ? getCellToUseChipOnCell(item, cellto) : getCellToUseWeaponOnCell(item, cellto);
}

function getCelltoUseItem(@item, @cellto) {
	if (item == CHIP_DEVIL_STRIKE) {
		return cellto;
	}
	if (cellto == null) {
		return;
	}
	var BestScoreLazer = 0;
	var BestShootLaser = 0;
	var BestCell;
	var BestDist = 99999;
	var ArrayPossibleCellz = [];
	for (var cell in getCellsToUseItem(item, cellto)) {
		if (getCellDistance(_CELL[_MY_SELF], cell) <= _MP[_MY_SELF]) {
			push(ArrayPossibleCellz, cell);
		}
	}
	for (var c in ArrayPossibleCellz) {
		if (getPathLength(_CELL[_MY_SELF], c) > _MP[_MY_SELF]) {
			removeElement(ArrayPossibleCellz, c);
		}
	}
	if (_ITEM_AREA[item] == AREA_LASER_LINE && !isPositiv(item)) {
		for (var cell in ArrayPossibleCellz) {
			var NbLeeks = getNumberOfPeopleInBrochette(cellto, cell);
			if (NbLeeks > BestScoreLazer) {
				BestScoreLazer = NbLeeks;
			}
		}
		for (var cell in ArrayPossibleCellz) {
			if (getNumberOfPeopleInBrochette(cellto, cell) < BestScoreLazer) {
				removeElement(ArrayPossibleCellz, cell);
			}
		}
	}
	for (var cell in ArrayPossibleCellz) {
		var dist = getCellDistance(_CELL[_MY_SELF], cell);
		if (getCellDistance(cell, cellto) >= DistFromArea(item) && dist < BestDist) {
			BestDist = dist;
			BestCell = cell;
		}
	}
	return BestCell;
}


function getCoefMp(@enemy) {
	var Coef = 0.001;
	if (getCellDistance(_CELL[_MY_SELF], _CELL[enemy]) < 20) {
		Coef += 1;
	}
	if (getCellDistance(_CELL[_MY_SELF], _CELL[enemy]) < 15) {
		Coef += 1.25;
	}
	if (getCellDistance(_CELL[_MY_SELF], _CELL[enemy]) < 10) {
		Coef += 1.5;
	}
	if (getCellDistance(_CELL[_MY_SELF], _CELL[enemy]) < 5) {
		Coef += 1.75;
	}
	if (LifePercent(getLife(), getTotalLife()) < 80) {
		Coef += 1;
	}
	if (LifePercent(getLife(), getTotalLife()) < 60) {
		Coef += 1.25;
	}
	if (LifePercent(getLife(), getTotalLife()) < 40) {
		Coef += 2;
	}
	if (LifePercent(getLife(), getTotalLife()) < 20) {
		Coef += 3;
	}

	return Coef;
}


function LifePercent(@life, @totallife) {
	if (totallife > 0) return life / totallife * 100;
	else return 100;
}

function GetTableauDesCells() {
	var tab = [];
	for (var i = 0; i <= 612; i++) {
			push(tab, i);
	}
	return tab;
}
global _ALL_CELLZ = GetTableauDesCells();
function getAnnauxCells(cell, mindist, maxdist) {
	var tab = [];
	for (var i in _ALL_CELLZ) {
		var dist = getCellDistance(cell, i);
		if (dist <= maxdist && dist >= mindist && !isObstacle(i) && i != null) {
			push(tab, i);
		}
	}
	return tab;
}

function getNeighbouringCellz(@cell) {

	var tabcellz = [];

	var x = getCellX(cell);
	var y = getCellY(cell);
	if (getCellFromXY(x + 1, y) != null && !isObstacle(getCellFromXY(x + 1, y))) {
		push(tabcellz, getCellFromXY(x + 1, y));
	}
	if (getCellFromXY(x - 1, y) != null && !isObstacle(getCellFromXY(x - 1, y))) {
		push(tabcellz, getCellFromXY(x - 1, y));
	}
	if (getCellFromXY(x, y + 1) != null && !isObstacle(getCellFromXY(x, y + 1))) {
		push(tabcellz, getCellFromXY(x, y + 1));
	}
	if (getCellFromXY(x, y - 1) != null && !isObstacle(getCellFromXY(x, y - 1))) {
		push(tabcellz, getCellFromXY(x, y - 1));
	}
	return tabcellz;
}

function RefreshWalkableCellz(@cell, @mp) {
	_CELL_MP = [cell];
	var set = [cell];
	for (var i = 0; i < mp; i++) {
		var Bords = [];
		for (var cellz in set) {
			for (var c in getNeighbouringCellz(cellz)) {
				if (!inArray(_CELL_MP, c)) {
					push(_CELL_MP, c);
					push(Bords, c);
				}
			}
		}
		set = Bords;
	}
}

function isAlwaysAccessible(@cell) {
	for (var c in _CELL_MP) {
		if (cell == c) return true;
	}
	return false;
}

function getAccesArrayCellz(cell, mp, tableau) {
	var accesscells = [cell];
	for (var c in _CELL_MP) {
		if (!inArray(accesscells, c) && c[1] <= mp) {
			push(accesscells, c);
		}
	}
	return @accesscells;
}

function GetWalkableCells(cell, mp) {
	var accesscells = [cell];
	var set = [cell];
	for (var i = 0; i < mp; i++) {
		var Bords = [];
		for (var cellz in set) {
			for (var c in getNeighbouringCellz(cellz)) {
				if (!inArray(accesscells, c)) {
					push(accesscells, c);
					push(Bords, c);
				}
			}
		}
		set = Bords;
	}
	return @accesscells;
}


RefreshWalkableCellz(_CELL[_MY_SELF], _MP[_MY_SELF]);

//_MY_WALKABLE_CELLZ = GetWalkableCells(_CELL[_MY_SELF], getMP());
function getAreaNumber(@item) {
	if (_ITEM_AREA[item] == AREA_CIRCLE_1) {
		return 1;
	}
	if (_ITEM_AREA[item] == AREA_CIRCLE_2) {
		return 2;
	}
	if (_ITEM_AREA[item] == AREA_CIRCLE_3) {
		return 3;
	}
	if (_ITEM_AREA[item] == AREA_LASER_LINE || _ITEM_AREA[item] == AREA_POINT) {
		return 0;
	}

}
